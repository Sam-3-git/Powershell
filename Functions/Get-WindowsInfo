# Get OS Info Function
Function Get-WindowsInfo {
    <#
    .DESCRIPTION
        Function to get information about a local or target computer

    .PARAMETER ComputerName
        Target Computer Names. Defaults to Local Host if not passed

    .PARAMETER OutPath
        Error Log location. Defaults to .\SMT.log

    .EXAMPLE
        # To run on remote host
        Get-WindowsInfo -ComputerName RemoteComputer01

    .EXAMPLE
        # To run on remote hosts
        Get-WindowsInfo -ComputerName RemoteComputer01,RemoteComputer02  
        
    .EXAMPLE
        # To specify log location
        Get-WindowsInfo -OutPath "C:\Logs\NewErrorLogLocation.txt"  

    #>
    PARAM(
        [Parameter()]
        [String[]]$ComputerName=$env:COMPUTERNAME,
        
        [Parameter()]
        [String]$OutPath="$PSScriptRoot\SMT.log"     
    )

    # Logging Function
    ##################
    Function Write-Log
    {
 
        PARAM(
            [String]$Message,
            [int]$Severity,
            [string]$Component
        )
            $LogPath = $OutPath
            $TimeZoneBias = Get-WMIObject -Query "Select Bias from Win32_TimeZone"
            $Date= Get-Date -Format "HH:mm:ss.fff"
            $Date2= Get-Date -Format "MM-dd-yyyy"
            $Type=1
         
            "<![LOG[$Message]LOG]!><time=$([char]34)$Date$($TimeZoneBias.bias)$([char]34) date=$([char]34)$date2$([char]34) component=$([char]34)$Component$([char]34) context=$([char]34)$([char]34) type=$([char]34)$Severity$([char]34) thread=$([char]34)$([char]34) file=$([char]34)$([char]34)>"| Out-File -FilePath "$LogPath" -Append -NoClobber -Encoding default
    }
    ##################

    $ComputerName | ForEach-Object -Begin {
        $OutputObject = $null
        $OutputTable = New-Object System.Data.DataTable
        $OutputTable.Columns.AddRange(@("ComputerName","Domain","Admin Password","Model", "Manufacturer", "BIOS Serial", "Caption", "OS Version"))
    } -Process {
        $ScriptBlock = {
            # Proper Build Number
            $ProductName = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name ProductName).ProductName
            Try
            {
                $Version = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name ReleaseID -ErrorAction Stop).ReleaseID
            }
            Catch
            {
                $Version = "N/A"
            }
            $CurrentBuild = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name CurrentBuild).CurrentBuild
            $UBR = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion' -Name UBR).UBR
            $OSVersion = $CurrentBuild + "." + $UBR
            
            # WMI Calls 
            $OS = Get-WmiObject -Class Win32_ComputerSystem
            $BIOS = Get-WmiObject -Class Win32_BIOS
            $Version = Get-WmiObject -Class Win32_OperatingSystem 

            switch ($os.AdminPasswordStatus) {
                1 {$AdminPass = 'Disabled'}
                2 {$AdminPass = 'Enabled'}
                3 {$AdminPass = 'NA'}
                4 {$AdminPass = 'Unknown'}
                default {$AdminPass = 'Unknown'}
            }

            # Create passthru table
            $PassthruTable = New-Object System.Data.DataTable
            $PassthruTable.Columns.AddRange(@("Computer Name","Domain", "AdminPassword", "Model", "Manufacturer", "BIOS Serial", "OS Version", "OS Build"))
            $PassthruTable.Rows.Add($env:COMPUTERNAME.Trim(),$OS.Domain.Trim(),$AdminPass.Trim(), $OS.Model.Trim(),$OS.Manufacturer.Trim(),$BIOS.SerialNumber.Trim(), $ProductName.Trim(),$OSVersion.Trim()) | Out-Null
            
            return $PassthruTable
        }

        # Check if localhost
        if ($_ -eq $env:COMPUTERNAME) {
            $PassthruTable = Invoke-Command -ScriptBlock $ScriptBlock
            $OutputTable.Rows.Add($PassthruTable.'Computer Name',$PassthruTable.Domain,$PassthruTable.AdminPassword, $PassthruTable.Model,$PassthruTable.Manufacturer,$PassthruTable.'BIOS Serial', $PassthruTable.'OS Version',$PassthruTable.'OS Build') | Out-Null
            Write-Log -Message "Invoke Command run on $_" -Severity 1 -Component "GetOSInfo"
        }
        Else {
            try {
                $PassthruTable = Invoke-Command -ComputerName $_ -ScriptBlock $ScriptBlock -ErrorAction Stop
                $OutputTable.Rows.Add($PassthruTable.'Computer Name',$PassthruTable.Domain,$PassthruTable.AdminPassword, $PassthruTable.Model,$PassthruTable.Manufacturer,$PassthruTable.'BIOS Serial', $PassthruTable.'OS Version',$PassthruTable.'OS Build') | Out-Null
                Write-Log -Message "Invoke Command run on $_" -Severity 1 -Component "GetOSInfo"
            }
            catch {
                $_
                Write-Log -Message "$_" -Severity 3 -Component "GetOSInfo"
            }
        }
    } -End {
          
    }
    return $OutputTable
}
